CS
  ::= Expr* EOF

Expr
  ::=   ( var Operator ( literal | URI ) | items ( statement (statement)* )? ) Separator?

statement ::= Operator items

var ::= "$"nstring

items ::= item ("," item)*

item ::= URI | literal

Separator
  ::= ';'

literal
  ::= '"' astring '"'

URI
  ::= "[" scheme? ( hostport | segment ) (segment)* query? fragment? headers "]"

headers
  ::= header*

header
  ::=  literal ":" literal

hostport
  ::= host (":" port)?

host
  ::= nstring

port
  ::= digit (digit)*

segment
  ::= path_delim string path_delim?

query
  ::= '?' string

fragment
  ::= '#' string

comments ::= "//" astring (astring)*

whitespace
         ::=  S^WS | comments
          /* ws: definition */

<?TOKENS?>

scheme
  ::= ("https" | "http" | "file") '://'

Operator
  ::= '|' |  '=' | ">>" | '>' | '!' | '?' | "!=" | "=="

nstring ::= alpha (alpha | schar | digit)*

string ::= character (character)*

astring ::= all (all)*
all ::= Operator | alpha | digit | schar

character ::= alpha | digit | schar

schar ::= "_" | "."

path_delim ::= '/'

digit ::= [0-9]

alpha ::= [a-z] | [A-Z]

S        ::= ( #x0020 | #x0009 | #x000D | #x000A )+

EOF      ::= $
